\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename screamer.info
@settitle Screamer
@c %**end of header

@settitle Screamer

@c for install-info
@dircategory Software development
@direntry
* Screamer:           Nondeterministic Extension to Common Lisp
@end direntry

@titlepage

@title Screamer
@subtitle A Nondeterministic Extension to Common Lisp

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

Screamer provides a nondeterministic choice-point operator, a
backtracking mechanism, and a forward propagation facility.

Screamer was originally written by Jeffrey Mark Siskind and David
Allen McAllester.

The copy of Screamer this documentation refers to is maintained
courtesy of @url{http://sb-studio.net/, Steel Bank Studio Ltd} by
@email{nikodemus@@sb-studio.net, Nikodemus Siivola}.

Screamer is maintained in Git:
@example
git clone git://github.com/nikodemus/screamer.git
@end example
will get you a local copy.
@example
 @url{http://github.com/nikodemus/screamer}
@end example
is the GitHub project page.

NOTE: This documentation is a work in progress. In the meanwhile you
may wish to refer to the original papers below.

@contents

@ifnottex

@include include/ifnottex.texinfo

@end ifnottex

@chapter Original Publications

Following original publications by Siskind and McAllester form the
basis of this manual:

@url{http://nikodemus.github.com/screamer/screaming-yellow-zonkers.pdf,
Screaming Yellow Zonkers}, 1991. Old Screamer manual, doesn't always
hold true for Screamer 3.20 on which this ``modern'' Screamer is
based, but still probably the most complete discussion of various
operators.

@url{http://nikodemus.github.com/screamer/screamer-paper.pdf,
Screamer: A Portable Efficient Implementation of Nondeterministic
Common Lisp}, 1993. A paper describing the fundamentals of Screamer.

@url{http://nikodemus.github.com/screamer/nondeterministic-lisp.pdf,
Nondeterministic Lisp as a Substrate for Constraint Logic
Programming}, 1993. A paper describing the constaints propagation
features of Screamer.

@chapter Overview

@section Important Note on Packages

Screamer shadows @code{defun}.

Examples in this manual are expected to be entered in the package
@code{SCREAMER-USER}, which has the correct @code{defun}.

Packages using Screamer are best defined using
@code{define-screamer-package}, which is like @code{defpackage} but
does some additional shadowing imports.

This is however by no means necessary: you can also explicitly use
@code{screamer::defun}.

@section Choice-Points, Failure, and Backtracking

Screamer adds nondeterminism by providing the @emph{choice-point}
operator @code{either} and the @emph{failure} operator @code{fail}.

A choice-point is a point in program where more than one thing can
happen. When a choice point is encountered, one of the possibilities
occurs, and execution continues. Should a failure subsequently occur,
the system backtracks to the last choice-point where multiple
possibilities were still present, and tries again.

@lisp
(all-values
  (let ((x (either 1 2 3 4)))
    (if (oddp x)
        x
        (fail)))) ; => (1 3)
@end lisp

At first @code{(either 1 2 3 4)} evaluates to 1, which is @code{oddp},
so @code{all-values} receives it and sets about producing the next
value.

This time @code{either} returns 2, which isn't @code{oddp}. Hence
@code{fail} is called causing the system to backtrack.

Starting again from the choice-point 3 is produced, which is
@code{oddp}, and is received by @code{all-values}, which in turn
requests the next value.

Now @code{either} returns 4, which again causes @code{fail} to backtrack.

Since the only choice-point available cannot produce any more alternatives,
control passes back to @code{all-values} which returns the collected values.

Had we wanted only one answer instead of an enumeration of all
possible answers we could have used @code{one-value} instead of
@code{all-values}.

If you're familiar with Prolog, @code{all-values} and @code{one-value}
are analogous to Prolog's @code{bag-of} and @code{cut} primitives.

@section Generators

Given @code{either} and @code{fail} we can write functions returning
arbitrary sequences of nondeterministic values. Such functions are
called @emph{generators}, and by convention have names starting with
@code{a-} or @code{an-}.

Consider for example @code{an-integer-between}:

@lisp
;;; Screamer already provides an-integer-between, so we'll
;;; call this by a different name.
(defun an-int-between (min max)
  (if (> min max)
      (fail)
      (either min (an-int-between (1+ min) max))))

(all-values (an-int-between 41 43)) ; => (41 21 43)
@end lisp

Called with two integers, this function produces nondeterministic
values in the given range -- finally backtracking to a previous
choice-point when possibilities have already been exhausted.

Given @code{an-integer-between} and @code{fail} we can write eg. a
generator for square numbers:

@lisp
;;; Square numbers are numbers produced by multiplying integer with itself.
(defun a-square-number (min max)
  (let* ((x (an-integer-between 0 max))
         (square (* x x)))
    (if (<= min square max)
        square
        (fail))))

(all-values (a-square-number 12 80)) ; => (16 25 36 49 64)
@end lisp

We're not restricted to numbers, of course. Writing a generator for
potential comedy duos works just the same:

@lisp
(defun a-comedic-actor ()
  (list (either :tall :short) (either :thin :fat)))

(defun a-comedy-duo ()
  (let ((a (a-comedic-actor))
        (b (a-comedic-actor)))
    (if (or (eq (first a) (first b))
            (eq (second a) (second b)))
        (fail)
        (list a :and b))))

(one-value (a-comedy-duo)) ; => ((:TALL :THIN) (:SHORT :FAT))
@end lisp

@section Side-Effects

What happens to side-effects when a nondeterministic function
backtracks?

By default Screamer undoes effects of @code{setf} and @code{setq}
(including calls to user-defined setf-functions), but not calls to
other functions with side-effects such as @code{set}, @code{rplaca},
or @code{sort}.

Macros @code{local} and @code{global} can be used to turn undoing of
side-effects of and on locally.

@section Constraints

In addition to nondeterminism via backtracking as discussed so far,
Screamer also provides for forward constraint propagation via
@emph{variables} constructed using @code{make-variable}.

Screamer provides a variety of primitives for constraining variables.

By convention suffix @code{v} is used to denote operators that accept
(and potentially return) variables in addition to values.

The operator @code{assert!} is the primary tool about asserting facts
about variables.

Assertions -- and constraint operators in general -- can cause failure
and backtracking, in which case constraints from the last attempt are
undone.

@chapter Nondetermism

@include include/macro-screamer-either.texinfo
@include include/fun-screamer-fail.texinfo
@include include/macro-screamer-all-values.texinfo
@include include/macro-screamer-one-value.texinfo
@include include/macro-screamer-ith-value.texinfo
@include include/macro-screamer-print-values.texinfo
@include include/macro-screamer-global.texinfo
@include include/macro-screamer-local.texinfo
@include include/fun-screamer-a-member-of.texinfo
@include include/fun-screamer-an-integer-between.texinfo
@include include/fun-screamer-apply-nondeterministic.texinfo
@include include/fun-screamer-funcall-nondeterministic.texinfo
@include include/fun-screamer-nondeterministic-function?.texinfo

@chapter Constraints

@include include/fun-screamer-booleanpv.texinfo
@include include/fun-screamer-equals-v.texinfo
@include include/fun-screamer-integerpv.texinfo
@include include/fun-screamer-lt-v.texinfo
@include include/fun-screamer-make-variable.texinfo
@include include/fun-screamer-memberv.texinfo
@include include/fun-screamer-numberpv.texinfo
@include include/fun-screamer-realpv.texinfo
@include include/macro-screamer-assert!.texinfo
@include include/macro-screamer-decide.texinfo
@include include/macro-screamer-known?.texinfo

@chapter Miscellany

@include include/fun-screamer-purge.texinfo
@include include/fun-screamer-unwedge-screamer.texinfo
@include include/var-screamer-star-dynamic-extent?star.texinfo
@include include/var-screamer-star-screamer-version-star.texinfo

@c Not cleaned up yet:
@c @include include/var-screamer-star-iscream?star.texinfo
@c @include include/var-screamer-star-maximum-discretization-range-star.texinfo
@c @include include/var-screamer-star-minimum-shrink-ratio-star.texinfo
@c @include include/var-screamer-star-strategy-star.texinfo
@c ...and plenty more completely missing still...

@bye
